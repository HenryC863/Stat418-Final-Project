# -*- coding: utf-8 -*-
"""Stat_418_Project .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UeTW1ccmY8HAiNHGnl0I7xtTkh3-1Po7
"""

import requests
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression

# Define API key and construct full URL directly
url = (
    "https://api.census.gov/data/timeseries/idb/5year"
    "?key=eac1e11f909802a93ae6d0fcc1b8cbe987f6a5df"
    "&get=GENC,POP,GR,RNI,POP_DENS,TFR,CBR,E0,IMR,CDR"
    "&YR=2024"
    "&for=genc+standard+countries+and+areas:"
    "AF,AL,DZ,AS,AD,AO,AI,AG,AR,AM,AW,AU,AT,AZ,BS,BH,BD,BB,BY,BE,BZ,BJ,BM,BT,BO,BA,BW,BR,BN,BG,BF,"
    "MM,BI,CV,KH,CM,CA,KY,CF,TD,CL,CN,CO,KM,CG,CD,CK,CR,CI,HR,CU,CW,CY,CZ,DK,DJ,DM,DO,EC,EG,SV,GQ,"
    "ER,EE,SZ,ET,FO,FJ,FI,FR,PF,GA,GM,XG,GE,DE,GH,GI,GR,GL,GD,GU,GT,GG,GN,GW,GY,HT,HN,HK,HU,IS,IN,"
    "ID,IR,IQ,IE,IM,IL,IT,JM,JP,JE,JO,KZ,KE,KI,KP,KR,XK,KW,KG,LA,LV,LB,LS,LR,LY,LT,LU,MO,MG,MW,MY,"
    "MV,ML,MT,MH,MR,MU,MX,FM,MD,MC,MN,ME,MS,MA,MZ,NA,NR,NP,NL,NC,NZ,NI,NE,NG,MK,MP,NO,OM,PK,PW,PA,"
    "PG,PY,PE,PH,PL,PT,PR,QA,RO,RU,RW,BL,SH,KN,LC,MF,PM,VC,WS,SM,ST,SA,SN,RS,SC,SL,SG,SX,SK,SI,SB,"
    "SO,ZA,SS,ES,LK,SD,SR,SE,CH,SY,TW,TJ,TZ,TH,TL,TG"
)

# Make request and convert to DataFrame
response = requests.get(url)
data = response.json()
df = pd.DataFrame(data[1:], columns=data[0])

df = df.rename(columns={
    "GENC": "GENC",
    "YR": "Year",  # Adjusted here
    "POP": "Population",
    "GR": "Annual Growth Rate",
    "RNI": "Rate of Natural Increase",
    "POP_DENS": "Population Density",
    "TFR": "Total Fertility Rate",
    "CBR": "Crude Birth Rate",
    "E0": "Life Expectancy",
    "IMR": "Infant Mortality Rate",
    "CDR": "Crude Death Rate"
})

df = df[[
    "Population",
    "Annual Growth Rate",
    "Population Density",
    "Total Fertility Rate",
    "Infant Mortality Rate",
    "Crude Death Rate",
    "Life Expectancy"
]]


df.head()



# Multiple Linear Regression
Y = df['Life Expectancy']
X = df.drop(['Life Expectancy'], axis=1)

model = LinearRegression()
model.fit(X, Y)

def predict(dict_values, X = X, model = model):
  x = np.array([float(dict_values[col]) for col in X])
  x = x.reshape(1,-1)
  y_pred = model.predict(x)[0]
  return y_pred

